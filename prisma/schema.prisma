// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Usuarios {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  nombres           String
  apellidos         String
  correo            String @unique
  clave             String
  role              String
  fechaCreacion     DateTime @default(now())

}

model Clientes {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  tipoDocumento     String
  noDocumento       String
  edad              Int 
  nombres           String
  apellidos         String
  correo            String @unique
  telefono          String
  direccion         String
  ciudad            String
  notas             String?
  pedidos           Pedidos[]
  fechaCreacion     DateTime @default(now())
}

model Productos{
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  nombre            String
  precio            Float
  foto              String @default("https://via.placeholder.com/300")
  categoria         Categorias @relation(fields: [categoriaId], references: [id])
  categoriaId       String @db.ObjectId
  descripcion       String
  activo            Boolean
  pedidosItems      PedidosItems[]
  fechaCreacion     DateTime @default(now())
}

model Categorias{
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  nombre            String
  activo            Boolean
  productos         Productos[]
  fechaCreacion     DateTime @default(now())
}

model Pedidos{
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  cliente           Clientes @relation(fields: [clienteId], references: [id])
  clienteId         String @db.ObjectId
  nota              String
  direccionEntrega  String
  referenciaEntrega String
  subtotal          Float
  total             Float
  estado            EstadoPedido
  items             PedidosItems[]
  fechaCreacion     DateTime @default(now())
}

model PedidosItems{
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  producto          Productos @relation(fields: [productoId], references: [id])
  productoId        String @db.ObjectId()
  pedido            Pedidos @relation(fields: [pedidoId], references: [id])
  pedidoId          String @db.ObjectId()
  cantidad          Int
  subtotal          Float
  fechaCreacion     DateTime @default(now())
}

enum EstadoPedido{
  RECIBIDO
  ENPROCESO
  ENTREGADO
  DEVUELTO
}
